# -*- coding: utf-8 -*-
"""linalg.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aWNXTYJdOhxxgo4f8UDaZtVouvYv3F9k
"""

import numpy as np
#creating a 3 x 3 matrix
mat1 = np.array([[1,2,3],[1,2,4],[3,4,5]])

print("This is the 3x3 matrix:\n", mat1)

# Creating a 2x3 matrix
matrix = np.array([[1, 2, 3], [4, 5, 6]])
print("This is the 2x3 matrix:\n", matrix)

"""#Basic Operations:-"""

mat1 = np.array([[1,2],[2,3]])
mat2 = np.array([[3,4],[5,6]])

print(mat1)
print(mat2)

#Addition:
print(mat1 + mat2)

#Subtraction:
print(mat1 - mat2)

#Scalar Multiplication:
print(mat1 * mat2)

#Divison:
print(mat1 / mat2)

#Transpose: Rows become columns and columns become rows; performed on square matrix

mat3 = np.array([[1,2],[3,4]])
result = np.transpose(mat3)
print(result)

#Trace: Sum of principal diagonal elements

result = np.trace(mat3)
result

#Inverse of a matrix:
result = np.linalg.inv(mat3)
result

#Determinant:

result = np.linalg.det(mat3)
result

#Matrix Flattening: Used for dimensionality reduction; changes matrix to a vector

result = mat3.flatten()
result

#Matrix Reshaping: Changes vector to a matrix

result = np.array([1,2,3,4,5,6,7,8])
result1 = result.reshape(1,8) # Row matrix
print("This is the row matrix:\n", result1)
result2 = result.reshape(8,1) # Column matrix
print("This is the column matrix:\n", result1)

"""#Statistical Measures:"""

array = np.arange(10)
print(array)

r1 = np.mean(array)
print(r1)

r2 = np.std(array)
print(r2)

r3 = np.var(array)
print(r3)

from statistics import mean, median, mode, stdev, variance
data = [1,2,3,4,5]
print(mean(data))
print(median(data))
print(mode(data))
print(stdev(data))
print(variance(data))

import statistics as st
data = [1,2,3,4,5]
print(st.mean(data))
print(st.geometric_mean(data))
print(st.harmonic_mean(data))

